#!/usr/bin/python

# imports - compatibility imports
from __future__ import print_function

# imports - standard imports
import sys, os, os.path as osp
import shutil
import argparse
import subprocess
from   distutils.spawn import find_executable

PYTHON_VERSION = sys.version_info

def is_python_version(*args, **kwargs):
    major  = kwargs.get("major", None)
    minor  = kwargs.get("minor", None)
    patch  = kwargs.get("patch", None)

    result = True

    if major:
        result = result and major == PYTHON_VERSION.major
    if minor:
        result = result and minor == PYTHON_VERSION.minor
    if patch:
        result = result and patch == PYTHON_VERSION.micro
        
    return result

PY2 = is_python_version(major = 2)

def iteritems(dict_, **kwargs):
    if PY2:
        iterator = dict_.iteritems()
    else:
        iterator = iter(dict_.items(), **kwargs)
    return iterator

class const(object):
    LOGO_ASCII                 = \
r"""
                                    __  __           
                                   |  \|  \          
  _______  ______   _______    ____| $$ \$$  _______ 
 /       \|      \ |       \  /      $$|  \ /       \
|  $$$$$$$ \$$$$$$\| $$$$$$$\|  $$$$$$$| $$|  $$$$$$$
| $$      /      $$| $$  | $$| $$  | $$| $$ \$$    \ 
| $$_____|  $$$$$$$| $$  | $$| $$__| $$| $$ _\$$$$$$\
 \$$     \\$$    $$| $$  | $$ \$$    $$| $$|       $$
  \$$$$$$$ \$$$$$$$ \$$   \$$  \$$$$$$$ \$$ \$$$$$$$ 
"""
    LOGO_ASCII_COLOR           = "\x1b[1;35;40m"

    URL_HOMEBREW_INSTALL       = "https://raw.githubusercontent.com/Homebrew/install/master/install"
    HOMEBREW_TAPS              = ["homebrew/science", "caskroom/cask"]
    HOMEBREW_DEPENDENCIES      = ["git", "python3", "gcc", "r", "graphviz", "yarn"]
    HOMEBREW_DEPENDENCIES_CASK = ["xquartz", "weka"]

    APTGET_DEPENDENCIES        = ["build-essential", "git", "python3-dev", "python3-pip", "graphviz-dev",
        "default-jre", "default-jre-headless", "default-jdk",
        "software-properties-common", "apt-transport-https",
        "dialog", "apt-utils",
        "python3-tk", "curl", "redis-server"
    ]

    URL_CANDIS                 = "https://github.com/HelikarLab/candis"

def which(executable, raise_err = False):
    path = find_executable(executable)

    if not path and raise_err:
        raise ValueError("{executable} not found.".format(
            executable = executable
        ))
    
    return path

def strip(string):
    string = string.lstrip()
    string = string.rstrip()
    return string

def popen(*params, **kwargs):
    output      = kwargs.get("output", False)
    directory   = kwargs.get("cwd")
    environment = kwargs.get("env")
    shell       = kwargs.get("shell", True)
    raise_err   = kwargs.get("raise_err", True)

    environ     = os.environ.copy()
    if environment:
        environ.update(environment)

    for k, v in iteritems(environ):
        environ[k] = str(v)

    command     = " ".join([str(arg) for arg in args])
    
    proc        = subprocess.Popen(command,
        stdin   = None if output else subprocess.PIPE,
        stdout  = None if output else subprocess.PIPE,
        stderr  = None if output else subprocess.PIPE,
        env     = environ,
        cwd     = directory,
        shell   = shell
    )

    code       = proc.wait()

    if code and raise_err:
        raise subprocess.CalledProcessError(code, command)

    if not output:
        output, error = proc.communicate()

        if output:
            output = output.decode("utf-8")
            output = strip(output)

        if error:
            error  = error.decode("utf-8")
            error  = strip(error)

        return code, output, error
    else:
        return code

def check_git_dir(dirpath, raise_err = True):
    git     = which("git", raise_err = True)
    
    if osp.isdir(dirpath) \
        and osp.isdir(osp.join(dirpath, ".git")) \
        and not popen(git, "rev-parse", "--is-inside-work-tree", dir = dirpath, raise_err = False):
        
        return True
    else:
        if raise_err:
            raise ValueError("{path} is not a valid git repository.".format(
                path = dirpath
            ))
        else:
            return False

def get_aptget():
    try:
        aptget = which("apt-get", raise_err = True)

        return aptget
    except ValueError as e:
        raise ValueError("{error} Please have it installed manually.".format(error = str(e)))

def get_homebrew(doctor = False):
    brew   = which("brew")
    if not brew:
        try:
            curl = which("curl", raise_err = True)
            ruby = which("ruby", raise_err = True)

            pout = popen(curl, const.URL_HOMEBREW_INSTALL, output = False)
            popen(ruby, "-e", pout)

            brew = which("brew", raise_err = True)
        except ValueError as e:
            raise ValueError("{error} Please have it installed manually.".format(error = str(e)))

    if doctor:
        popen(brew, "doctor", raise_err = False)

    return brew

def get_candis():
    appdir = osp.join(osp.expanduser("~"), "candis")
        
    if not osp.exists(appdir):
        git = which("git", raise_err = True)
        popen(git, "clone", "--recursive", const.URL_CANDIS, appdir)
    else:
        check_git_dir(appdir)

    Rscript = which("Rscript", raise_err = True)
    popen(Rscript, "setup.R", dir = osp.join(appdir, "R"))
    
    python3 = which("python3", raise_err = True)
    pip3    = which("pip3",    raise_err = True)
    
    popen(pip3, "install", "--upgrade", "pip")

    popen(pip3, "install", "numpy") # Thanks, javabridge.
    popen(pip3, "install", "--ignore-installed", "-r", "requirements.txt",     dir = appdir)
    # popen(pip3, "install", "-r", "requirements-dev.txt", dir = appdir, raise_err = False)

    # Force matplotlib backend for macOS
    if sys.platform == "darwin":
        with open(osp.join(osp.expanduser("~"), ".matplotlib", "matplotlibrc"), mode = "a") as f:
            config = "backend: TkAgg"

            if config not in f.readlines():
                f.write("\nbackend: TkAgg")

    popen(python3, "setup.py", "install", dir = appdir)

    candis = which("candis", raise_err = True)

    return candis

def setup_candis(args = None):
    code = os.EX_OK

    if   sys.platform == "darwin":
        brew   = get_homebrew()

        popen(brew, "tap",  *const.HOMEBREW_TAPS, raise_err = False)
        popen(brew, "cask", "install", *const.HOMEBREW_DEPENDENCIES_CASK, raise_err = False)
        popen(brew,         "install", *const.HOMEBREW_DEPENDENCIES,      raise_err = False)
    elif sys.platform.startswith("linux"):
        try:
            aptget    = which("apt-get", raise_err = True)

            popen(aptget, "update")
            popen(aptget, "install", "-y", *const.APTGET_DEPENDENCIES)

            # Install R
            addapt    = which("add-apt-repository", raise_err = True)
            popen(which("apt-key", raise_err = True), "adv", "--keyserver", "keyserver.ubuntu.com", "--recv-keys", "E084DAB9")
            
            _, out, _ = popen("lsb_release -sc", output = True)
            popen(addapt, "'deb [arch=amd64,i386] https://cran.rstudio.com/bin/linux/ubuntu {version}/'".format(version = out))
            popen(aptget, "update")
            popen(aptget, "install", "-y", "r-base")

            # Install Oracle JRE/JDK
            popen(addapt, "-y", "ppa:webupd8team/java")
            popen(aptget, "update")

            # Install PostgreSQL
            popen(aptget, "install postgresql postgresql-contrib")

            # Install yarn
            popen("curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add -")
            popen("echo 'deb https://dl.yarnpkg.com/debian/ stable main' | tee /etc/apt/sources.list.d/yarn.list")
            popen(aptget, "update")
            popen(aptget, "install", "-y", "yarn")
            
            # Auto Agree License.
            popen("echo debconf shared/accepted-oracle-license-v1-1 select true | debconf-set-selections")
            popen("echo debconf shared/accepted-oracle-license-v1-1 seen   true | debconf-set-selections")

            popen(aptget, "install", "-y", "oracle-java8-installer")
        except ValueError:
            code = 1
    else:
        code = 1
    
    if code == os.EX_OK:
        candis = get_candis()

    return code

def get_argument_parser():
    descr     = "{color}{logo}\x1b[0m".format(
        color = const.LOGO_ASCII_COLOR,
        logo  = const.LOGO_ASCII
    )
    parser    = argparse.ArgumentParser(
        description     = descr,
        formatter_class = argparse.RawDescriptionHelpFormatter
    )

    parser.add_argument("-v", "--version",
        default = "develop",
        help    = "version to install"
    )
    parser.add_argument("-d", "--data",
        default = False,
        help    = "fetch sample data"
    )
    parser.add_argument("--verbose",
        default = True,
        help    = "display log information"
    )

    return parser

def main(args = None):
    parser = get_argument_parser()
    args   = parser.parse_args(args)

    code   = setup_candis(args)

    sys.exit(code)

if __name__ == "__main__":
    args   = sys.argv[1:]
    main(args)